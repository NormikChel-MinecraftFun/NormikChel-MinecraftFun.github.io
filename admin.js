// ‚ö†Ô∏è –°–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ ‚Äî –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ö–µ—à–∏)
const ADMIN_PASSWORD_HASH = "4d186321c1a7f0f354b297e8914ab240"; // md5 –æ—Ç "admin123" ‚Äî –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ò–ó–ú–ï–ù–ò–¢–¨!

// üîÑ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–µ (–¥–ª—è –¥–µ–º–æ)
function simpleHash(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
        const char = str.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash;
    }
    return Math.abs(hash).toString(16);
}

// üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
function attemptLogin() {
    const password = document.getElementById('password-input').value;
    const hash = simpleHash(password);
    if (hash === ADMIN_PASSWORD_HASH) {
        document.getElementById('login-screen').classList.remove('active');
        document.getElementById('admin-screen').classList.add('active');
        localStorage.setItem('adminSession', Date.now());
        logAccess('login_success');
    } else {
        document.getElementById('login-error').textContent = "Invalid password. Try again.";
        logAccess('login_failed');
    }
}

// üö™ –í—ã—Ö–æ–¥
function logout() {
    localStorage.removeItem('adminSession');
    window.location.href = 'admin.html';
}

// üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
function checkSession() {
    const session = localStorage.getItem('adminSession');
    if (!session || (Date.now() - session) > 30 * 60 * 1000) { // 30 –º–∏–Ω—É—Ç
        logout();
    }
}

// üìú –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
function loadTools() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ localStorage –∏–ª–∏ script.js
    const toolsList = document.getElementById('tools-list');
    toolsList.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...</p>';
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É
}

// üåê –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤
function switchLangTab(lang) {
    document.getElementById('tab-ru').classList.remove('active');
    document.getElementById('tab-en').classList.remove('active');
    document.getElementById(`tab-${lang}`).classList.add('active');
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    loadTranslations(lang);
}

// üíæ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function exportConfig() {
    const config = {
        translations: translations, // –∏–∑ script.js
        tools: [], // –≤–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        pages: {} // FAQ, ToS –∏ —Ç.–¥.
    };
    const blob = new Blob([JSON.stringify(config, null, 2)], {type: 'application/json'});
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'minecraft-tools-config.json';
    a.click();
}

// üì• –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function importConfig() {
    const fileInput = document.getElementById('import-file');
    const file = fileInput.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            try {
                const config = JSON.parse(e.target.result);
                alert('Configuration imported successfully!');
                // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            } catch (err) {
                alert('Invalid configuration file.');
            }
        };
        reader.readAsText(file);
    }
}

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
function loadStats() {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ‚Äî –∏–∑ localStorage
}

// üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
function savePageContent() {
    const page = document.getElementById('page-selector').value;
    const content = document.getElementById('page-content').value;
    localStorage.setItem(`page_${page}`, content);
    alert('Page saved successfully!');
}

// üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏
    setInterval(checkSession, 60000); // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    loadTools();
    loadStats();
});

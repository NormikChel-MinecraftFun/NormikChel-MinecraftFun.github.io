// üåê –°–∏—Å—Ç–µ–º–∞ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π, SVG-—Ñ–ª–∞–≥–∞–º–∏ –∏ SEO
const translations = {
    en: {
        // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        title: "Minecraft Tools Hub ‚Äî Tools for Builders & Explorers",
        metaDescription: "Best Minecraft tools: calculators, generators, converters. Helps with building, farming, exploring and more!",
        headerSubtitle: "All the tools you need for your Minecraft adventure",
        footerText: "¬© 2025 Minecraft Tools Hub ‚Äî All tools for true builders and explorers! Made with ‚ù§Ô∏è for Minecraft players",

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        navHome: "Home",
        navFAQ: "F.A.Q.",
        navBot: "Helper Bot",
        navTOS: "Terms of Service",
        navPrivacy: "Privacy Policy",

        // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tool1_title: "üè† House Blocks Calculator",
        tool1_desc: "Calculate how many blocks you need to build a house.",
        tool1_btn: "Calculate",
        tool1_result: blocks => `Total blocks: ${Math.ceil(blocks)}`,

        tool2_title: "üåç Random Coordinates Generator",
        tool2_desc: "Get random coordinates for teleportation.",
        tool2_btn: "Generate",
        tool2_result: (x, y, z) => `Teleport: /tp @s ${x} ${y} ${z}`,

        tool3_title: "‚è≥ Game Time Converter",
        tool3_desc: "Convert minutes to in-game days and vice versa.",
        tool3_btn: "Convert",
        tool3_result: mins => `${mins} min = ${(mins / 20).toFixed(2)} in-game days`,

        tool4_title: "‚ú® XP Calculator",
        tool4_desc: "How many levels will N XP give you?",
        tool4_btn: "Calculate",
        tool4_result: (level, remaining) => `Level: ${level} (remaining: ${remaining} XP)`,

        tool5_title: "üè∑Ô∏è Item Name Generator",
        tool5_desc: "Create cool names for your items!",
        tool5_btn: "Generate",
        tool5_result: name => `Name: ¬ßl${name}`,

        tool6_title: "üí• Creeper Farm Calculator",
        tool6_desc: "How many creepers to kill for N gunpowder?",
        tool6_btn: "Calculate",
        tool6_result: creepers => `Need to kill ~${creepers} creepers`,

        tool7_title: "üå± Random Seed Generator",
        tool7_desc: "Get a random seed for a new world.",
        tool7_btn: "Generate",
        tool7_result: seed => `Seed: ${seed}`,

        tool8_title: "üõ°Ô∏è Armor Durability Calculator",
        tool8_desc: "How many hits will your armor withstand?",
        tool8_btn: "Calculate",
        tool8_result: (hits, damage) => `Withstands ~${hits} hits of ${damage} damage`,

        // –ë–æ—Ç
        bot_placeholder: "E.g.: How to build a Nether portal?",
        bot_send: "Send",
        bot_examples: "üí° Example questions:",
        bot_answers: {
            diamonds: "‚ö° Diamonds spawn at levels 1-15. Best to mine at Y=-58 with Fortune III. Use iron pickaxe or better!",
            portal: "üî• Nether portal requires 10-14 obsidian blocks in 4x5 door shape (no corners). Light the inside with flint and steel!",
            xp: "üåü Best XP farm: Hoglins in Nether or Creepers/Skeletons in Overworld. Don‚Äôt forget Power enchantment on bow!",
            world: "üåç World generates up to X/Z ¬±30,000,000, but stable only to ¬±2,999,984. Beyond that ‚Äî bugs and lags.",
            enchant: "‚ú® Use enchanting table with 15 bookshelves around. Level 30 gives best enchants. Or combine items on anvil!",
            default: "Hmm... I‚Äôm still learning. Try rephrasing or check F.A.Q. üòä"
        },

        // –Ø–∑—ã–∫
        langName: "English",
        flag: "üá∫üá∏"
    },
    ru: {
        // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        title: "Minecraft Tools Hub ‚Äî –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π",
        metaDescription: "–õ—É—á—à–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è Minecraft: –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã, –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã. –ü–æ–º–æ–≥—É—Ç –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ, —Ñ–∞—Ä–º–µ, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –º–∏—Ä–∞ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ!",
        headerSubtitle: "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ Minecraft",
        footerText: "¬© 2025 Minecraft Tools Hub ‚Äî –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π! –°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ Minecraft",

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        navHome: "–ì–ª–∞–≤–Ω–∞—è",
        navFAQ: "F.A.Q.",
        navBot: "–ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫",
        navTOS: "–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        navPrivacy: "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",

        // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tool1_title: "üè† –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–ª–æ–∫–æ–≤ –¥–ª—è –¥–æ–º–∞",
        tool1_desc: "–†–∞—Å—Å—á–∏—Ç–∞–π, —Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–∞.",
        tool1_btn: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å",
        tool1_result: blocks => `–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: ${Math.ceil(blocks)}`,

        tool2_title: "üåç –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
        tool2_desc: "–ü–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏.",
        tool2_btn: "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å",
        tool2_result: (x, y, z) => `–¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–π—Å—è: /tp @s ${x} ${y} ${z}`,

        tool3_title: "‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
        tool3_desc: "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –º–∏–Ω—É—Ç—ã –≤ –∏–≥—Ä–æ–≤—ã–µ –¥–Ω–∏ –∏ –æ–±—Ä–∞—Ç–Ω–æ.",
        tool3_btn: "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å",
        tool3_result: mins => `${mins} –º–∏–Ω = ${(mins / 20).toFixed(2)} –∏–≥—Ä–æ–≤—ã—Ö –¥–Ω–µ–π`,

        tool4_title: "‚ú® –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–ø—ã—Ç–∞",
        tool4_desc: "–°–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π –¥–∞—Å—Ç —Ç–µ–±–µ N –æ–ø—ã—Ç–∞?",
        tool4_btn: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å",
        tool4_result: (level, remaining) => `–£—Ä–æ–≤–µ–Ω—å: ${level} (–æ—Å—Ç–∞—Ç–æ–∫: ${remaining} –æ–ø—ã—Ç–∞)`,

        tool5_title: "üè∑Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
        tool5_desc: "–°–æ–∑–¥–∞–π –∫—Ä—É—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!",
        tool5_btn: "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å",
        tool5_result: name => `–ù–∞–∑–≤–∞–Ω–∏–µ: ¬ßl${name}`,

        tool6_title: "üí• –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ñ–µ—Ä–º—ã –∫—Ä–∏–ø–µ—Ä–æ–≤",
        tool6_desc: "–°–∫–æ–ª—å–∫–æ –∫—Ä–∏–ø–µ—Ä–æ–≤ –Ω—É–∂–Ω–æ —É–±–∏—Ç—å –¥–ª—è N –ø–æ—Ä–æ—Ö–∞?",
        tool6_btn: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å",
        tool6_result: creepers => `–ù—É–∂–Ω–æ —É–±–∏—Ç—å ~${creepers} –∫—Ä–∏–ø–µ—Ä–æ–≤`,

        tool7_title: "üå± –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ seed",
        tool7_desc: "–ü–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—ã–π seed –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∏—Ä–∞.",
        tool7_btn: "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å",
        tool7_result: seed => `Seed: ${seed}`,

        tool8_title: "üõ°Ô∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –±—Ä–æ–Ω–∏",
        tool8_desc: "–°–∫–æ–ª—å–∫–æ —É–¥–∞—Ä–æ–≤ –≤—ã–¥–µ—Ä–∂–∏—Ç –±—Ä–æ–Ω—è?",
        tool8_btn: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å",
        tool8_result: (hits, damage) => `–í—ã–¥–µ—Ä–∂–∏—Ç ~${hits} —É–¥–∞—Ä–æ–≤ –ø–æ ${damage} —É—Ä–æ–Ω–∞`,

        // –ë–æ—Ç
        bot_placeholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Ä—Ç–∞–ª –≤ –ù–∏–∂–Ω–∏–π –º–∏—Ä?",
        bot_send: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
        bot_examples: "üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:",
        bot_answers: {
            diamonds: "‚ö° –ê–ª–º–∞–∑—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω—è—Ö 1-15. –õ—É—á—à–µ –≤—Å–µ–≥–æ –∫–æ–ø–∞—Ç—å –Ω–∞ Y=-58 —Å —É–¥–∞—á–µ–π III. –ò—Å–ø–æ–ª—å–∑—É–π –∂–µ–ª–µ–∑–Ω—É—é –∫–∏—Ä–∫—É –∏–ª–∏ –ª—É—á—à–µ!",
            portal: "üî• –ü–æ—Ä—Ç–∞–ª –≤ –ù–∏–∂–Ω–∏–π –º–∏—Ä —Å—Ç—Ä–æ–∏—Ç—Å—è –∏–∑ 10-14 –±–ª–æ–∫–æ–≤ –æ–±—Å–∏–¥–∏–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–µ –¥–≤–µ—Ä–∏ 4x5 (–±–µ–∑ —É–≥–ª–æ–≤). –ó–∞–∂–≥–∏ —Å–µ—Ä–µ–¥–∏–Ω—É –∑–∞–∂–∏–≥–∞–ª–∫–æ–π!",
            xp: "üåü –õ—É—á—à–∞—è —Ñ–µ—Ä–º–∞ –æ–ø—ã—Ç–∞ ‚Äî —Å –∑–æ–≥–ª–∏–Ω–∞–º–∏ –≤ –ù–∏–∂–Ω–µ–º –º–∏—Ä–µ –∏–ª–∏ —Å –∫—Ä–∏–ø–µ—Ä–∞–º–∏/—Å–∫–µ–ª–µ—Ç–∞–º–∏ –≤ –æ–±—ã—á–Ω–æ–º –º–∏—Ä–µ. –ù–µ –∑–∞–±—É–¥—å –º–∞–≥–∏—é '–¢–æ—á–Ω–æ—Å—Ç—å' –Ω–∞ –ª—É–∫–µ!",
            world: "üåç –ö–∞—Ä—Ç–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–æ X/Z ¬±30,000,000, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ ¬±2,999,984. –î–∞–ª—å—à–µ ‚Äî –±–∞–≥–∏ –∏ –ª–∞–≥–∏.",
            enchant: "‚ú® –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–æ–ª –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏—è —Å 15 –∫–Ω–∏–∂–Ω—ã–º–∏ —à–∫–∞—Ñ–∞–º–∏ –≤–æ–∫—Ä—É–≥. –£—Ä–æ–≤–µ–Ω—å 30 –¥–∞—ë—Ç –ª—É—á—à–∏–µ —á–∞—Ä—ã. –ò–ª–∏ –∫–æ–º–±–∏–Ω–∏—Ä—É–π –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –Ω–∞–∫–æ–≤–∞–ª—å–Ω–µ!",
            default: "–•–º... –Ø –µ—â—ë —É—á—É—Å—å. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ F.A.Q. üòä"
        },

        // –Ø–∑—ã–∫
        langName: "–†—É—Å—Å–∫–∏–π",
        flag: "üá∑üá∫"
    }
};

// üåê –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞ –ë–ï–ó –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ + –∞–Ω–∏–º–∞—Ü–∏—è + SEO
function setLanguage(lang) {
    if (!['en', 'ru'].includes(lang)) return;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('language', lang);

    // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    const newUrl = new URL(window.location);
    newUrl.searchParams.set('lang', lang);
    window.history.pushState({ lang }, '', newUrl);

    // –ê–Ω–∏–º–∞—Ü–∏—è fade-out
    document.body.classList.add('language-fade');
    setTimeout(() => {
        applyTranslations(lang);
        updateSEOTags(lang);
        updateLanguageUI(lang);
        document.body.classList.remove('language-fade');
    }, 300);

    // –°–∫—Ä—ã–≤–∞–µ–º –¥—Ä–æ–ø–¥–∞—É–Ω
    const dropdown = document.getElementById('lang-dropdown');
    if (dropdown) dropdown.style.display = 'none';
}

// üåê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SEO-—Ç–µ–≥–æ–≤
function updateSEOTags(lang) {
    const t = translations[lang];

    // Title
    document.title = t.title;

    // Meta description
    let metaDesc = document.querySelector('meta[name="description"]');
    if (!metaDesc) {
        metaDesc = document.createElement('meta');
        metaDesc.name = 'description';
        document.head.appendChild(metaDesc);
    }
    metaDesc.content = t.metaDescription;

    // Open Graph
    let ogTitle = document.querySelector('meta[property="og:title"]');
    if (ogTitle) ogTitle.content = t.title;

    let ogDesc = document.querySelector('meta[property="og:description"]');
    if (ogDesc) ogDesc.content = t.metaDescription;

    // Twitter
    let twitterTitle = document.querySelector('meta[name="twitter:title"]');
    if (twitterTitle) twitterTitle.content = t.title;

    let twitterDesc = document.querySelector('meta[name="twitter:description"]');
    if (twitterDesc) twitterDesc.content = t.metaDescription;
}

// üåê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —è–∑—ã–∫–∞
function updateLanguageUI(lang) {
    const t = translations[lang];
    const flagSpan = document.getElementById('current-flag');
    const langSpan = document.getElementById('current-lang');

    if (flagSpan) {
        if (lang === 'en') {
            flagSpan.innerHTML = '<svg width="20" height="15" viewBox="0 0 20 15" xmlns="http://www.w3.org/2000/svg"><defs><clipPath id="a"><rect width="20" height="15"/></clipPath></defs><g clip-path="url(#a)"><rect width="20" height="15" fill="#00247D"/><path d="M0 0h20v15H0z" fill="#00247D"/><path d="M0 0v15l8-6.5L0 2z" fill="#CF142B"/><path d="M20 0v15l-8-6.5L20 2z" fill="#CF142B"/><path d="M0 0h20v2H0z" fill="#fff"/><path d="M0 13h20v2H0z" fill="#fff"/><path d="M0 6h20v3H0z" fill="#fff"/><path d="M8 0h2v15H8z" fill="#fff"/><path d="M10 0l-8 6.5V2L10 8z" fill="#CF142B"/><path d="M10 15l8-6.5V13L10 7z" fill="#CF142B"/></g></svg>';
        } else {
            flagSpan.innerHTML = '<svg width="20" height="15" viewBox="0 0 20 15" xmlns="http://www.w3.org/2000/svg"><rect width="20" height="5" y="0" fill="#fff"/><rect width="20" height="5" y="5" fill="#0033A0"/><rect width="20" height="5" y="10" fill="#D52B1E"/></svg>';
        }
    }

    if (langSpan) langSpan.textContent = t.langName;
}

// üåê –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
function applyTranslations(lang) {
    const t = translations[lang];

    // Header
    const headerP = document.querySelector('header p');
    if (headerP) headerP.textContent = t.headerSubtitle;

    // Footer
    const footerP = document.querySelectorAll('footer p');
    if (footerP[1]) footerP[1].innerHTML = t.footerText;

    // Navigation
    const navLinks = document.querySelectorAll('footer a');
    if (navLinks[0]) navLinks[0].textContent = t.navHome;
    if (navLinks[1]) navLinks[1].textContent = t.navFAQ;
    if (navLinks[2]) navLinks[2].textContent = t.navBot;
    if (navLinks[3]) navLinks[3].textContent = t.navTOS;
    if (navLinks[4]) navLinks[4].textContent = t.navPrivacy;

    // Tools
    const toolCards = document.querySelectorAll('.tool-card');
    if (toolCards[0]) {
        toolCards[0].querySelector('h3').textContent = t.tool1_title;
        toolCards[0].querySelector('p').textContent = t.tool1_desc;
        toolCards[0].querySelector('button').textContent = t.tool1_btn;
    }
    if (toolCards[1]) {
        toolCards[1].querySelector('h3').textContent = t.tool2_title;
        toolCards[1].querySelector('p').textContent = t.tool2_desc;
        toolCards[1].querySelector('button').textContent = t.tool2_btn;
    }
    if (toolCards[2]) {
        toolCards[2].querySelector('h3').textContent = t.tool3_title;
        toolCards[2].querySelector('p').textContent = t.tool3_desc;
        toolCards[2].querySelector('button').textContent = t.tool3_btn;
    }
    if (toolCards[3]) {
        toolCards[3].querySelector('h3').textContent = t.tool4_title;
        toolCards[3].querySelector('p').textContent = t.tool4_desc;
        toolCards[3].querySelector('button').textContent = t.tool4_btn;
    }
    if (toolCards[4]) {
        toolCards[4].querySelector('h3').textContent = t.tool5_title;
        toolCards[4].querySelector('p').textContent = t.tool5_desc;
        toolCards[4].querySelector('button').textContent = t.tool5_btn;
    }
    if (toolCards[5]) {
        toolCards[5].querySelector('h3').textContent = t.tool6_title;
        toolCards[5].querySelector('p').textContent = t.tool6_desc;
        toolCards[5].querySelector('button').textContent = t.tool6_btn;
    }
    if (toolCards[6]) {
        toolCards[6].querySelector('h3').textContent = t.tool7_title;
        toolCards[6].querySelector('p').textContent = t.tool7_desc;
        toolCards[6].querySelector('button').textContent = t.tool7_btn;
    }
    if (toolCards[7]) {
        toolCards[7].querySelector('h3').textContent = t.tool8_title;
        toolCards[7].querySelector('p').textContent = t.tool8_desc;
        toolCards[7].querySelector('button').textContent = t.tool8_btn;
    }

    // Results (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)
    const results = [
        { id: 'result-blocks', key: 'tool1_result', args: [0] },
        { id: 'result-coords', key: 'tool2_result', args: [0,0,0] },
        { id: 'result-time', key: 'tool3_result', args: [0] },
        { id: 'result-xp', key: 'tool4_result', args: [0,0] },
        { id: 'result-itemname', key: 'tool5_result', args: [''] },
        { id: 'result-creepers', key: 'tool6_result', args: [0] },
        { id: 'result-seed', key: 'tool7_result', args: [0] },
        { id: 'result-armor', key: 'tool8_result', args: [0,0] }
    ];

    results.forEach(r => {
        const el = document.getElementById(r.id);
        if (el && el.style.display !== 'none') {
            el.textContent = '';
        }
    });

    // –î–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–æ—Ç–∞
    if (window.location.pathname.includes('bot.html')) {
        const input = document.getElementById('user-question');
        if (input) input.placeholder = t.bot_placeholder;
        const btn = document.querySelector('button[onclick="askBot()"]');
        if (btn) btn.textContent = t.bot_send;
        const examplesTitle = document.querySelector('.tool-card h3');
        if (examplesTitle && examplesTitle.textContent.includes('üí°')) {
            examplesTitle.textContent = t.bot_examples;
        }
    }
}

// üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥—Ä–æ–ø–¥–∞—É–Ω–∞
    const toggleBtn = document.getElementById('lang-toggle');
    const dropdown = document.getElementById('lang-dropdown');

    if (toggleBtn && dropdown) {
        toggleBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
        });

        document.addEventListener('click', (e) => {
            if (!dropdown.contains(e.target) && e.target !== toggleBtn) {
                dropdown.style.display = 'none';
            }
        });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
    const urlParams = new URLSearchParams(window.location.search);
    const langFromURL = urlParams.get('lang');
    const langFromStorage = localStorage.getItem('language');
    const browserLang = navigator.language.startsWith('ru') ? 'ru' : 'en';

    let lang = langFromURL || langFromStorage || browserLang;
    if (!['en', 'ru'].includes(lang)) lang = 'ru';

    localStorage.setItem('language', lang);
    updateLanguageUI(lang);
    applyTranslations(lang);
    updateSEOTags(lang);

    // –î–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–æ—Ç–∞
    if (window.location.pathname.includes('bot.html')) {
        const input = document.getElementById('user-question');
        if (input) input.placeholder = translations[lang].bot_placeholder;
        const btn = document.querySelector('button[onclick="askBot()"]');
        if (btn) btn.textContent = translations[lang].bot_send;
    }
});

// ü§ñ –ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫
function askBot() {
    const lang = localStorage.getItem('language') || 'ru';
    const t = translations[lang];
    const question = document.getElementById('user-question')?.value.trim().toLowerCase();
    const answerDiv = document.getElementById('bot-answer');
    if (!answerDiv) return;

    let answer = t.bot_answers.default;

    if (question?.includes("–∞–ª–º–∞–∑") || question?.includes("diamond")) {
        answer = t.bot_answers.diamonds;
    } else if (question?.includes("–ø–æ—Ä—Ç–∞–ª") || question?.includes("portal") || question?.includes("–Ω–∏–∂–Ω–∏–π –º–∏—Ä") || question?.includes("nether")) {
        answer = t.bot_answers.portal;
    } else if (question?.includes("–æ–ø—ã—Ç") || question?.includes("xp") || question?.includes("—Ñ–µ—Ä–º–∞") || question?.includes("farm")) {
        answer = t.bot_answers.xp;
    } else if (question?.includes("–∫—Ä–∞") || question?.includes("world") || question?.includes("–º–∏—Ä") || question?.includes("edge")) {
        answer = t.bot_answers.world;
    } else if (question?.includes("–∑–∞—á–∞—Ä") || question?.includes("enchant") || question?.includes("—á–∞—Ä")) {
        answer = t.bot_answers.enchant;
    }

    answerDiv.style.display = 'block';
    answerDiv.textContent = answer;
}

// üè† 1. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–ª–æ–∫–æ–≤ –¥–ª—è –¥–æ–º–∞
function calculateBlocks() {
    const l = parseFloat(document.getElementById('length').value);
    const w = parseFloat(document.getElementById('width').value);
    const h = parseFloat(document.getElementById('height').value);

    if (!isNaN(l) && !isNaN(w) && !isNaN(h)) {
        const walls = 2 * h * (l + w);
        const roof = l * w;
        const floor = l * w;
        const total = walls + roof + floor;

        const resultDiv = document.getElementById('result-blocks');
        resultDiv.style.display = 'block';
        const lang = localStorage.getItem('language') || 'ru';
        resultDiv.textContent = translations[lang].tool1_result(total);
    } else {
        const lang = localStorage.getItem('language') || 'ru';
        alert(lang === 'en' ? 'Please enter all values.' : '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è.');
    }
}

// üåç 2. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
function generateCoords() {
    const x = Math.floor(Math.random() * 2000 - 1000);
    const z = Math.floor(Math.random() * 2000 - 1000);
    const y = 64 + Math.floor(Math.random() * 100);

    const resultDiv = document.getElementById('result-coords');
    resultDiv.style.display = 'block';
    const lang = localStorage.getItem('language') || 'ru';
    resultDiv.textContent = translations[lang].tool2_result(x, y, z);
}

// ‚è≥ 3. –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function convertGameTime() {
    const mins = parseFloat(document.getElementById('game-minutes').value);
    if (!isNaN(mins)) {
        const resultDiv = document.getElementById('result-time');
        resultDiv.style.display = 'block';
        const lang = localStorage.getItem('language') || 'ru';
        resultDiv.textContent = translations[lang].tool3_result(mins);
    } else {
        const lang = localStorage.getItem('language') || 'ru';
        alert(lang === 'en' ? 'Enter minutes.' : '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.');
    }
}

// ‚ú® 4. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–ø—ã—Ç–∞
function calculateXP() {
    const xp = parseInt(document.getElementById('xp-amount').value);
    if (!isNaN(xp) && xp >= 0) {
        let level = 0;
        let remaining = xp;
        for (let i = 1; remaining >= 0; i++) {
            const cost = i <= 16 ? i * 2 + 5 : (i <= 31 ? i * 5 - 38 : i * 9 - 158);
            if (remaining < cost) break;
            remaining -= cost;
            level = i;
        }
        const resultDiv = document.getElementById('result-xp');
        resultDiv.style.display = 'block';
        const lang = localStorage.getItem('language') || 'ru';
        resultDiv.textContent = translations[lang].tool4_result(level, remaining);
    } else {
        const lang = localStorage.getItem('language') || 'ru';
        alert(lang === 'en' ? 'Enter valid XP.' : '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞.');
    }
}

// üè∑Ô∏è 5. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤
function generateItemName() {
    const lang = localStorage.getItem('language') || 'ru';
    const prefixes = lang === 'ru' 
        ? ['–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', '–ü—Ä–æ–∫–ª—è—Ç—ã–π', '–°–∏—è—é—â–∏–π', '–¢–µ–º–Ω—ã–π', '–í–µ—á–Ω—ã–π', '–û–≥–Ω–µ–Ω–Ω—ã–π', '–õ–µ–¥—è–Ω–æ–π']
        : ['Legendary', 'Cursed', 'Shining', 'Dark', 'Eternal', 'Fiery', 'Frosty'];
    const suffixes = lang === 'ru'
        ? ['–ú–µ—á–∞', '–ü–æ—Å–æ—Ö–∞', '–©–∏—Ç–∞', '–õ—É–∫–∞', '–ö–∏—Ä–∫–∏', '–®–ª–µ–º–∞', '–ê–º—É–ª–µ—Ç–∞']
        : ['Sword', 'Staff', 'Shield', 'Bow', 'Pickaxe', 'Helmet', 'Amulet'];

    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
    const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];
    const name = `${prefix} ${suffix}`;

    const resultDiv = document.getElementById('result-itemname');
    resultDiv.style.display = 'block';
    resultDiv.textContent = translations[lang].tool5_result(name);
}

// üí• 6. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ñ–µ—Ä–º—ã –∫—Ä–∏–ø–µ—Ä–æ–≤
function calculateCreepers() {
    const needed = parseInt(document.getElementById('gunpowder-needed').value);
    if (!isNaN(needed) && needed > 0) {
        const creepers = Math.ceil(needed / 2);
        const resultDiv = document.getElementById('result-creepers');
        resultDiv.style.display = 'block';
        const lang = localStorage.getItem('language') || 'ru';
        resultDiv.textContent = translations[lang].tool6_result(creepers);
    } else {
        const lang = localStorage.getItem('language') || 'ru';
        alert(lang === 'en' ? 'Enter gunpowder amount.' : '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä–æ—Ö–∞.');
    }
}

// üå± 7. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä seed
function generateSeed() {
    const seed = Math.floor(Math.random() * 9007199254740991) - 4503599627370495;
    const resultDiv = document.getElementById('result-seed');
    resultDiv.style.display = 'block';
    const lang = localStorage.getItem('language') || 'ru';
    resultDiv.textContent = translations[lang].tool7_result(seed);
}

// üõ°Ô∏è 8. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –±—Ä–æ–Ω–∏
function calculateArmorDurability() {
    const armorDurabilities = {
        leather: 55,
        iron: 165,
        diamond: 363,
        netherite: 407
    };
    const type = document.getElementById('armor-type').value;
    const damage = parseFloat(document.getElementById('damage-per-hit').value);
    if (!isNaN(damage) && damage > 0) {
        const durability = armorDurabilities[type];
        const hits = Math.floor(durability / damage);
        const resultDiv = document.getElementById('result-armor');
        resultDiv.style.display = 'block';
        const lang = localStorage.getItem('language') || 'ru';
        resultDiv.textContent = translations[lang].tool8_result(hits, damage);
    } else {
        const lang = localStorage.getItem('language') || 'ru';
        alert(lang === 'en' ? 'Enter damage per hit.' : '–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–Ω –∑–∞ —É–¥–∞—Ä.');
    }
}

// üîß –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò (–¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü script.js)

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.toolsData = [
    {
        id: 1,
        name: { ru: "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–ª–æ–∫–æ–≤ –¥–ª—è –¥–æ–º–∞", en: "House Blocks Calculator" },
        description: { 
            ru: "–†–∞—Å—Å—á–∏—Ç–∞–π, —Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–∞.", 
            en: "Calculate how many blocks you need to build a house." 
        },
        url: "#",
        icon: "üè†"
    },
    {
        id: 2, 
        name: { ru: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", en: "Random Coordinates Generator" },
        description: { 
            ru: "–ü–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏.", 
            en: "Get random coordinates for teleportation." 
        },
        url: "#",
        icon: "üåç"
    },
    // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
];

window.renderTools = function(lang = 'ru') {
    // –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    console.log('Render tools function called');
};

window.currentLang = localStorage.getItem('language') || 'ru';

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
window.enableAdmin = function() {
    document.getElementById('simple-admin').style.display = 'block';
    console.log('üîì –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å');
    return '–ê–¥–º–∏–Ω–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π adminShowTools()';
};

window.disableAdmin = function() {
    document.getElementById('simple-admin').style.display = 'none';
    console.log('üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å–∫—Ä—ã—Ç–∞');
    return '–ê–¥–º–∏–Ω–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞!';
};

window.adminShowTools = function() {
    const content = document.getElementById('admin-content');
    if (!content) return '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!';
    
    content.innerHTML = '<h4>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</h4>' + 
        JSON.stringify(window.toolsData, null, 2)
            .replace(/\n/g, '<br>')
            .replace(/ /g, '&nbsp;');
    return '–î–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞–∑–∞–Ω—ã';
};

window.adminEditTool = function(toolId, lang, field, newValue) {
    const tool = window.toolsData.find(t => t.id === toolId);
    if (tool) {
        tool[field][lang] = newValue;
        console.log(`‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${toolId} –æ–±–Ω–æ–≤–ª–µ–Ω:`, tool);
        return `–ó–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${newValue}`;
    }
    return '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω';
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∫–∏ –µ—Å–ª–∏ –≤ localStorage
if (localStorage.getItem('adminConsoleMode') === 'true') {
    setTimeout(() => {
        if (typeof enableAdmin === 'function') enableAdmin();
    }, 1000);
}

console.log('üîß –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π –≤ –∫–æ–Ω—Å–æ–ª–∏:');
console.log('enableAdmin() - –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å');
console.log('adminShowTools() - –ø–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤');
console.log('adminEditTool(1, "ru", "name", "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ") - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å');

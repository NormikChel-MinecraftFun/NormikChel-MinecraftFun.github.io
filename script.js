// üåê –°–∏—Å—Ç–µ–º–∞ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π, SVG-—Ñ–ª–∞–≥–∞–º–∏ –∏ SEO
const translations = {
    en: {
        title: "Minecraft Tools Hub ‚Äî Tools for Builders & Explorers",
        metaDescription: "Best Minecraft tools: calculators, generators, converters. Helps with building, farming, exploring and more!",
        headerSubtitle: "All the tools you need for your Minecraft adventure",
        footerText: "¬© 2025 Minecraft Tools Hub ‚Äî All tools for true builders and explorers! Made with ‚ù§Ô∏è for Minecraft players",

        navHome: "Home",
        navFAQ: "F.A.Q.",
        navBot: "Helper Bot",
        navTOS: "Terms of Service",
        navPrivacy: "Privacy Policy",
        navRedstone: "Redstone Calculator",
        navEnchant: "Enchant Optimizer",
        navBiome: "Biome Finder",

        // Existing tools (1‚Äì8)
        tool1_title: "üè† House Blocks Calculator",
        tool1_desc: "Calculate how many blocks you need to build a house.",
        tool1_btn: "Calculate",
        tool1_result: blocks => `Total blocks: ${Math.ceil(blocks)}`,

        tool2_title: "üåç Random Coordinates Generator",
        tool2_desc: "Get random coordinates for teleportation.",
        tool2_btn: "Generate",
        tool2_result: (x, y, z) => `Teleport: /tp @s ${x} ${y} ${z}`,

        tool3_title: "‚è≥ Game Time Converter",
        tool3_desc: "Convert minutes to in-game days and vice versa.",
        tool3_btn: "Convert",
        tool3_result: mins => `${mins} min = ${(mins / 20).toFixed(2)} in-game days`,

        tool4_title: "‚ú® XP Calculator",
        tool4_desc: "How many levels will N XP give you?",
        tool4_btn: "Calculate",
        tool4_result: (level, remaining) => `Level: ${level} (remaining: ${remaining} XP)`,

        tool5_title: "üè∑Ô∏è Item Name Generator",
        tool5_desc: "Create cool names for your items!",
        tool5_btn: "Generate",
        tool5_result: name => `Name: ¬ßl${name}`,

        tool6_title: "üí• Creeper Farm Calculator",
        tool6_desc: "How many creepers to kill for N gunpowder?",
        tool6_btn: "Calculate",
        tool6_result: creepers => `Need to kill ~${creepers} creepers`,

        tool7_title: "üå± Random Seed Generator",
        tool7_desc: "Get a random seed for a new world.",
        tool7_btn: "Generate",
        tool7_result: seed => `Seed: ${seed}`,

        tool8_title: "üõ°Ô∏è Armor Durability Calculator",
        tool8_desc: "How many hits will your armor withstand?",
        tool8_btn: "Calculate",
        tool8_result: (hits, damage) => `Withstands ~${hits} hits of ${damage} damage`,

        // NEW: Redstone
        redstone_title: "‚ö° Redstone Calculator",
        redstone_subtitle: "Calculate chain length, delay, and repeater count.",
        redstone_tool_title: "üîÅ Repeater Calculator",
        redstone_tool_desc: "How many repeaters for a chain of N blocks?",
        redstone_btn: "Calculate",
        redstone_result: (repeaters, delay) => `Repeaters: ${repeaters} (delay: ${delay.toFixed(1)}s)`,

        // NEW: Enchant
        enchant_title: "‚ú® Enchant Optimizer",
        enchant_subtitle: "What's the best enchant at level N?",
        enchant_tool_title: "üìö Best Enchantment",
        enchant_btn: "Suggest",
        enchant_result: enchant => `Best enchant: ${enchant}`,

        // NEW: Biome
        biome_title: "üå≥ Biome Finder",
        biome_subtitle: "Where to find the biome you need?",
        biome_tool_title: "üó∫Ô∏è Find Biome",
        biome_btn: "Find",
        biome_result: {
            nether: "Enter the Nether via a portal (4x5 obsidian frame).",
            end: "Find a Stronghold, activate End Portal with 12 Eyes of Ender.",
            jungle: "Look near rivers or oceans in warm climates. Use /locate biome minecraft:jungle",
            desert: "Common in dry areas. Use /locate biome minecraft:desert",
            mushroom: "Rare! Found on small islands in oceans. Use /locate biome minecraft:mushroom_fields"
        },

        // Bot
        bot_placeholder: "E.g.: How to build a Nether portal?",
        bot_send: "Send",
        bot_examples: "üí° Example questions:",
        bot_answers: {
            diamonds: "‚ö° Diamonds spawn at levels 1-15. Best to mine at Y=-58 with Fortune III. Use iron pickaxe or better!",
            portal: "üî• Nether portal requires 10-14 obsidian blocks in 4x5 door shape (no corners). Light the inside with flint and steel!",
            xp: "üåü Best XP farm: Hoglins in Nether or Creepers/Skeletons in Overworld. Don‚Äôt forget Power enchantment on bow!",
            world: "üåç World generates up to X/Z ¬±30,000,000, but stable only to ¬±2,999,984. Beyond that ‚Äî bugs and lags.",
            enchant: "‚ú® Use enchanting table with 15 bookshelves around. Level 30 gives best enchants. Or combine items on anvil!",
            default: "Hmm... I‚Äôm still learning. Try rephrasing or check F.A.Q. üòä"
        },

        langName: "English",
        flag: "üá∫üá∏"
    },
    ru: {
        title: "Minecraft Tools Hub ‚Äî –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π",
        metaDescription: "–õ—É—á—à–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è Minecraft: –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã, –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã. –ü–æ–º–æ–≥—É—Ç –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ, —Ñ–∞—Ä–º–µ, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –º–∏—Ä–∞ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ!",
        headerSubtitle: "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ Minecraft",
        footerText: "¬© 2025 Minecraft Tools Hub ‚Äî –í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–π –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π! –°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ Minecraft",

        navHome: "–ì–ª–∞–≤–Ω–∞—è",
        navFAQ: "F.A.Q.",
        navBot: "–ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫",
        navTOS: "–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        navPrivacy: "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
        navRedstone: "–†–µ–¥—Å—Ç–æ—É–Ω-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
        navEnchant: "–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏–π",
        navBiome: "–ü–æ–∏—Å–∫ –±–∏–æ–º–æ–≤",

        tool1_title: "üè† –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–ª–æ–∫–æ–≤ –¥–ª—è –¥–æ–º–∞",
        tool1_desc: "–†–∞—Å—Å—á–∏—Ç–∞–π, —Å–∫–æ–ª—å–∫–æ –±–ª–æ–∫–æ–≤ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–∞.",
        tool1_btn: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å",
        tool1_result: blocks => `–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: ${Math.ceil(blocks)}`,

        tool2_title: "üåç –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç",
        tool2_desc: "–ü–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏.",
        tool2_btn: "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å",
        tool2_result: (x, y, z) => `–¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–π—Å—è: /tp @s ${x} ${y} ${z}`,

        tool3_title: "‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
        tool3_desc: "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –º–∏–Ω—É—Ç—ã –≤ –∏–≥—Ä–æ–≤—ã–µ –¥–Ω–∏ –∏ –æ–±—Ä–∞—Ç–Ω–æ.",
        tool3_btn: "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å",
        tool3_result: mins => `${mins} –º–∏–Ω = ${(mins / 20).toFixed(2)} –∏–≥—Ä–æ–≤—ã—Ö –¥–Ω–µ–π`,

        tool4_title: "‚ú® –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–ø—ã—Ç–∞",
        tool4_desc: "–°–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π –¥–∞—Å—Ç —Ç–µ–±–µ N –æ–ø—ã—Ç–∞?",
        tool4_btn: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å",
        tool4_result: (level, remaining) => `–£—Ä–æ–≤–µ–Ω—å: ${level} (–æ—Å—Ç–∞—Ç–æ–∫: ${remaining} –æ–ø—ã—Ç–∞)`,

        tool5_title: "üè∑Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
        tool5_desc: "–°–æ–∑–¥–∞–π –∫—Ä—É—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤!",
        tool5_btn: "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å",
        tool5_result: name => `–ù–∞–∑–≤–∞–Ω–∏–µ: ¬ßl${name}`,

        tool6_title: "üí• –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ñ–µ—Ä–º—ã –∫—Ä–∏–ø–µ—Ä–æ–≤",
        tool6_desc: "–°–∫–æ–ª—å–∫–æ –∫—Ä–∏–ø–µ—Ä–æ–≤ –Ω—É–∂–Ω–æ —É–±–∏—Ç—å –¥–ª—è N –ø–æ—Ä–æ—Ö–∞?",
        tool6_btn: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å",
        tool6_result: creepers => `–ù—É–∂–Ω–æ —É–±–∏—Ç—å ~${creepers} –∫—Ä–∏–ø–µ—Ä–æ–≤`,

        tool7_title: "üå± –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ seed",
        tool7_desc: "–ü–æ–ª—É—á–∏ —Å–ª—É—á–∞–π–Ω—ã–π seed –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∏—Ä–∞.",
        tool7_btn: "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å",
        tool7_result: seed => `Seed: ${seed}`,

        tool8_title: "üõ°Ô∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –±—Ä–æ–Ω–∏",
        tool8_desc: "–°–∫–æ–ª—å–∫–æ —É–¥–∞—Ä–æ–≤ –≤—ã–¥–µ—Ä–∂–∏—Ç –±—Ä–æ–Ω—è?",
        tool8_btn: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å",
        tool8_result: (hits, damage) => `–í—ã–¥–µ—Ä–∂–∏—Ç ~${hits} —É–¥–∞—Ä–æ–≤ –ø–æ ${damage} —É—Ä–æ–Ω–∞`,

        // NEW
        redstone_title: "‚ö° –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–µ–¥—Å—Ç–æ—É–Ω–∞",
        redstone_subtitle: "–†–∞—Å—Å—á–∏—Ç–∞–π –¥–ª–∏–Ω—É —Ü–µ–ø–∏, –∑–∞–¥–µ—Ä–∂–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ–ª–µ–π.",
        redstone_tool_title: "üîÅ –†–∞—Å—á—ë—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ–ª–µ–π",
        redstone_tool_desc: "–°–∫–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ–ª–µ–π –Ω—É–∂–Ω–æ –¥–ª—è —Ü–µ–ø–∏ –¥–ª–∏–Ω–æ–π N –±–ª–æ–∫–æ–≤?",
        redstone_btn: "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å",
        redstone_result: (repeaters, delay) => `–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ–ª–µ–π: ${repeaters} (–∑–∞–¥–µ—Ä–∂–∫–∞: ${delay.toFixed(1)}—Å)`,

        enchant_title: "‚ú® –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏–π",
        enchant_subtitle: "–ö–∞–∫–æ–µ –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ —É—Ä–æ–≤–Ω–µ N?",
        enchant_tool_title: "üìö –õ—É—á—à–µ–µ –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏–µ",
        enchant_btn: "–ü–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å",
        enchant_result: enchant => `–õ—É—á—à–µ–µ –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏–µ: ${enchant}`,

        biome_title: "üå≥ –ü–æ–∏—Å–∫ –±–∏–æ–º–æ–≤",
        biome_subtitle: "–ì–¥–µ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π –±–∏–æ–º? –°–æ–≤–µ—Ç—ã –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.",
        biome_tool_title: "üó∫Ô∏è –ù–∞–π—Ç–∏ –±–∏–æ–º",
        biome_btn: "–ù–∞–π—Ç–∏",
        biome_result: {
            nether: "–ü–æ—Å—Ç—Ä–æ–π –ø–æ—Ä—Ç–∞–ª –∏–∑ –æ–±—Å–∏–¥–∏–∞–Ω–∞ (4x5) –∏ –∑–∞–∂–≥–∏ –µ–≥–æ.",
            end: "–ù–∞–π–¥–∏ –∫—Ä–µ–ø–æ—Å—Ç—å, –∞–∫—Ç–∏–≤–∏—Ä—É–π –ø–æ—Ä—Ç–∞–ª –ö—Ä–∞—è 12 –≥–ª–∞–∑–∞–º–∏ –ö—Ä–∞—è.",
            jungle: "–ò—â–∏ —Ä—è–¥–æ–º —Å —Ä–µ–∫–∞–º–∏ –≤ —Ç—ë–ø–ª—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö. –ö–æ–º–∞–Ω–¥–∞: /locate biome minecraft:jungle",
            desert: "–ß–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –∑–∞—Å—É—à–ª–∏–≤—ã—Ö –∑–æ–Ω–∞—Ö. /locate biome minecraft:desert",
            mushroom: "–û—á–µ–Ω—å —Ä–µ–¥–∫–∏–π! –¢–æ–ª—å–∫–æ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–∞—Ö –≤ –æ–∫–µ–∞–Ω–µ. /locate biome minecraft:mushroom_fields"
        },

        bot_placeholder: "–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ—Ä—Ç–∞–ª –≤ –ù–∏–∂–Ω–∏–π –º–∏—Ä?",
        bot_send: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
        bot_examples: "üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:",
        bot_answers: {
            diamonds: "‚ö° –ê–ª–º–∞–∑—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω—è—Ö 1-15. –õ—É—á—à–µ –≤—Å–µ–≥–æ –∫–æ–ø–∞—Ç—å –Ω–∞ Y=-58 —Å —É–¥–∞—á–µ–π III. –ò—Å–ø–æ–ª—å–∑—É–π –∂–µ–ª–µ–∑–Ω—É—é –∫–∏—Ä–∫—É –∏–ª–∏ –ª—É—á—à–µ!",
            portal: "üî• –ü–æ—Ä—Ç–∞–ª –≤ –ù–∏–∂–Ω–∏–π –º–∏—Ä —Å—Ç—Ä–æ–∏—Ç—Å—è –∏–∑ 10-14 –±–ª–æ–∫–æ–≤ –æ–±—Å–∏–¥–∏–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–µ –¥–≤–µ—Ä–∏ 4x5 (–±–µ–∑ —É–≥–ª–æ–≤). –ó–∞–∂–≥–∏ —Å–µ—Ä–µ–¥–∏–Ω—É –∑–∞–∂–∏–≥–∞–ª–∫–æ–π!",
            xp: "üåü –õ—É—á—à–∞—è —Ñ–µ—Ä–º–∞ –æ–ø—ã—Ç–∞ ‚Äî —Å –∑–æ–≥–ª–∏–Ω–∞–º–∏ –≤ –ù–∏–∂–Ω–µ–º –º–∏—Ä–µ –∏–ª–∏ —Å –∫—Ä–∏–ø–µ—Ä–∞–º–∏/—Å–∫–µ–ª–µ—Ç–∞–º–∏ –≤ –æ–±—ã—á–Ω–æ–º –º–∏—Ä–µ. –ù–µ –∑–∞–±—É–¥—å –º–∞–≥–∏—é '–¢–æ—á–Ω–æ—Å—Ç—å' –Ω–∞ –ª—É–∫–µ!",
            world: "üåç –ö–∞—Ä—Ç–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–æ X/Z ¬±30,000,000, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ ¬±2,999,984. –î–∞–ª—å—à–µ ‚Äî –±–∞–≥–∏ –∏ –ª–∞–≥–∏.",
            enchant: "‚ú® –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–æ–ª –∑–∞—á–∞—Ä–æ–≤–∞–Ω–∏—è —Å 15 –∫–Ω–∏–∂–Ω—ã–º–∏ —à–∫–∞—Ñ–∞–º–∏ –≤–æ–∫—Ä—É–≥. –£—Ä–æ–≤–µ–Ω—å 30 –¥–∞—ë—Ç –ª—É—á—à–∏–µ —á–∞—Ä—ã. –ò–ª–∏ –∫–æ–º–±–∏–Ω–∏—Ä—É–π –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ –Ω–∞–∫–æ–≤–∞–ª—å–Ω–µ!",
            default: "–•–º... –Ø –µ—â—ë —É—á—É—Å—å. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ F.A.Q. üòä"
        },

        langName: "–†—É—Å—Å–∫–∏–π",
        flag: "üá∑üá∫"
    },

    // === –ù–û–í–´–ï –Ø–ó–´–ö–ò (–º–∏–Ω–∏–º—É–º ‚Äî –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã) ===
    zh: { langName: "‰∏≠Êñá", flag: "üá®üá≥", title: "Minecraft Â∑•ÂÖ∑‰∏≠ÂøÉ", headerSubtitle: "‰Ω†ÂÜíÈô©ÊâÄÈúÄÁöÑ‰∏ÄÂàáÂ∑•ÂÖ∑", navHome: "‰∏ªÈ°µ", navFAQ: "Â∏∏ËßÅÈóÆÈ¢ò", navBot: "Âä©ÊâãÊú∫Âô®‰∫∫", navTOS: "‰ΩøÁî®Êù°Ê¨æ", navPrivacy: "ÈöêÁßÅÊîøÁ≠ñ", navRedstone: "Á∫¢Áü≥ËÆ°ÁÆóÂô®", navEnchant: "ÈôÑÈ≠î‰ºòÂåñÂô®", navBiome: "ÁîüÁâ©Áæ§Á≥ªÊü•ÊâæÂô®", bot_placeholder: "‰æãÂ¶ÇÔºöÂ¶Ç‰ΩïÂª∫ÈÄ†‰∏ãÁïå‰º†ÈÄÅÈó®Ôºü", bot_send: "ÂèëÈÄÅ", redstone_btn: "ËÆ°ÁÆó", enchant_btn: "Âª∫ËÆÆ", biome_btn: "Êü•Êâæ", tool1_btn: "ËÆ°ÁÆó", tool2_btn: "ÁîüÊàê", tool3_btn: "ËΩ¨Êç¢", tool4_btn: "ËÆ°ÁÆó", tool5_btn: "ÁîüÊàê", tool6_btn: "ËÆ°ÁÆó", tool7_btn: "ÁîüÊàê", tool8_btn: "ËÆ°ÁÆó" },
    es: { langName: "Espa√±ol", flag: "üá™üá∏", title: "Minecraft Tools Hub", headerSubtitle: "Todas las herramientas para tu aventura", navHome: "Inicio", navFAQ: "Preguntas frecuentes", navBot: "Bot asistente", navTOS: "T√©rminos", navPrivacy: "Privacidad", navRedstone: "Calculadora de Redstone", navEnchant: "Optimizador de encantamientos", navBiome: "Buscador de biomas", bot_placeholder: "Ej: ¬øC√≥mo construir un portal al Nether?", bot_send: "Enviar", redstone_btn: "Calcular", enchant_btn: "Sugerir", biome_btn: "Buscar", tool1_btn: "Calcular", tool2_btn: "Generar", tool3_btn: "Convertir", tool4_btn: "Calcular", tool5_btn: "Generar", tool6_btn: "Calcular", tool7_btn: "Generar", tool8_btn: "Calcular" },
    hi: { langName: "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", flag: "üáÆüá≥", title: "Minecraft ‡§ü‡•Ç‡§≤‡•ç‡§∏ ‡§π‡§¨", headerSubtitle: "‡§Ü‡§™‡§ï‡•á Minecraft ‡§∏‡§æ‡§π‡§∏‡§ø‡§ï ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§≠‡•Ä ‡§â‡§™‡§ï‡§∞‡§£", navHome: "‡§Æ‡•Å‡§ñ‡•ç‡§Ø", navFAQ: "‡§Ö‡§ï‡•ç‡§∏‡§∞ ‡§™‡•Ç‡§õ‡•á ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§®", navBot: "‡§∏‡§π‡§æ‡§Ø‡§ï ‡§¨‡•â‡§ü", navTOS: "‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•Ä ‡§∂‡§∞‡•ç‡§§‡•á‡§Ç", navPrivacy: "‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§®‡•Ä‡§§‡§ø", navRedstone: "‡§∞‡•á‡§°‡§∏‡•ç‡§ü‡•ã‡§® ‡§ï‡•à‡§≤‡§ï‡•Å‡§≤‡•á‡§ü‡§∞", navEnchant: "‡§è‡§®‡•ç‡§ö‡§æ‡§Ç‡§ü ‡§ë‡§™‡•ç‡§ü‡§ø‡§Æ‡§æ‡§á‡§ú‡§º‡§∞", navBiome: "‡§¨‡§æ‡§Ø‡•ã‡§Æ ‡§ñ‡•ã‡§ú‡§ï‡§∞‡•ç‡§§‡§æ", bot_placeholder: "‡§â‡§¶‡§æ.: ‡§®‡•á‡§¶‡§∞ ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤ ‡§ï‡•à‡§∏‡•á ‡§¨‡§®‡§æ‡§è‡§Ç?", bot_send: "‡§≠‡•á‡§ú‡•á‡§Ç", redstone_btn: "‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç", enchant_btn: "‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á‡§Ç", biome_btn: "‡§ñ‡•ã‡§ú‡•á‡§Ç", tool1_btn: "‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç", tool2_btn: "‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç", tool3_btn: "‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç", tool4_btn: "‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç", tool5_btn: "‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç", tool6_btn: "‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç", tool7_btn: "‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§∞‡•á‡§Ç", tool8_btn: "‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç" },
    bn: { langName: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", flag: "üáßüá©", title: "Minecraft ‡¶ü‡ßÅ‡¶≤‡¶∏ ‡¶π‡¶æ‡¶¨", headerSubtitle: "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Minecraft ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶≠‡ßá‡¶û‡ßç‡¶ö‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶ü‡ßÅ‡¶≤", navHome: "‡¶π‡ßã‡¶Æ", navFAQ: "‡¶™‡ßç‡¶∞‡¶æ‡¶Ø‡¶º‡¶∂‡¶á ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶ø‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®", navBot: "‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶¨‡¶ü", navTOS: "‡¶∂‡¶∞‡ßç‡¶§‡¶æ‡¶¨‡¶≤‡ßÄ", navPrivacy: "‡¶ó‡ßã‡¶™‡¶®‡ßÄ‡¶Ø‡¶º‡¶§‡¶æ ‡¶®‡ßÄ‡¶§‡¶ø", navRedstone: "‡¶∞‡ßá‡¶°‡¶∏‡ßç‡¶ü‡ßã‡¶® ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶ü‡¶∞", navEnchant: "‡¶è‡¶®‡¶ö‡¶æ‡¶®‡ßç‡¶ü ‡¶Ö‡¶™‡ßç‡¶ü‡¶ø‡¶Æ‡¶æ‡¶á‡¶ú‡¶æ‡¶∞", navBiome: "‡¶¨‡¶æ‡¶Ø‡¶º‡ßã‡¶Æ ‡¶´‡¶æ‡¶á‡¶®‡ßç‡¶°‡¶æ‡¶∞", bot_placeholder: "‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶®‡ßá‡¶¶‡¶æ‡¶∞ ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶æ‡¶≤ ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá‡¶®?", bot_send: "‡¶™‡¶æ‡¶†‡¶æ‡¶®", redstone_btn: "‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®", enchant_btn: "‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡¶ø‡¶®", biome_btn: "‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®", tool1_btn: "‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®", tool2_btn: "‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", tool3_btn: "‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®", tool4_btn: "‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®", tool5_btn: "‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", tool6_btn: "‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®", tool7_btn: "‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®", tool8_btn: "‡¶ó‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®" },
    pt: { langName: "Portugu√™s", flag: "üáµüáπ", title: "Minecraft Tools Hub", headerSubtitle: "Todas as ferramentas para sua aventura", navHome: "In√≠cio", navFAQ: "Perguntas Frequentes", navBot: "Bot Assistente", navTOS: "Termos de Servi√ßo", navPrivacy: "Pol√≠tica de Privacidade", navRedstone: "Calculadora de Redstone", navEnchant: "Otimizador de Encantamentos", navBiome: "Localizador de Biomas", bot_placeholder: "Ex: Como construir um portal do Nether?", bot_send: "Enviar", redstone_btn: "Calcular", enchant_btn: "Sugerir", biome_btn: "Localizar", tool1_btn: "Calcular", tool2_btn: "Gerar", tool3_btn: "Converter", tool4_btn: "Calcular", tool5_btn: "Gerar", tool6_btn: "Calcular", tool7_btn: "Gerar", tool8_btn: "Calcular" },
    ur: { langName: "ÿßÿ±ÿØŸà", flag: "üáµüá∞", title: "Minecraft ŸπŸàŸÑÿ≤ €Åÿ®", headerSubtitle: "ÿ¢Ÿæ ⁄©€í Minecraft ÿ≥ŸÅÿ± ⁄©€í ŸÑ€å€í ÿ™ŸÖÿßŸÖ ŸπŸàŸÑÿ≤", navHome: "€ÅŸàŸÖ", navFAQ: "ÿß⁄©ÿ´ÿ± ŸæŸà⁄Ü⁄æ€í ⁄Øÿ¶€í ÿ≥ŸàÿßŸÑÿßÿ™", navBot: "ŸÖÿπÿßŸàŸÜ ÿ®ŸàŸπ", navTOS: "ÿßÿ≥ÿ™ÿπŸÖÿßŸÑ ⁄©€å ÿ¥ÿ±ÿßÿ¶ÿ∑", navPrivacy: "ÿ±ÿßÿ≤ÿØÿßÿ±€å ⁄©€å ŸæÿßŸÑ€åÿ≥€å", navRedstone: "ÿ±€å⁄à ÿßÿ≥ŸπŸàŸÜ ⁄©€åŸÑ⁄©ŸàŸÑ€åŸπÿ±", navEnchant: "ÿ¨ÿßŸÜ⁄Ü ⁄©ÿß ÿ®€Åÿ™ÿ±€åŸÜ ÿ∑ÿ±€åŸÇ€Å", navBiome: "ÿ®ÿßÿ¶€åŸàŸÖ ÿ™ŸÑÿßÿ¥ ⁄©ÿ±ŸÜ€í ŸàÿßŸÑÿß", bot_placeholder: "ŸÖÿ´ÿßŸÑ: ŸÜ€åÿØÿ± ŸæŸàÿ±ŸπŸÑ ⁄©€åÿ≥€í ÿ®ŸÜÿßÿ¶€å⁄∫ÿü", bot_send: "ÿ®⁄æ€åÿ¨€å⁄∫", redstone_btn: "ÿ≠ÿ≥ÿßÿ® ⁄©ÿ±€å⁄∫", enchant_btn: "ÿ™ÿ¨Ÿà€åÿ≤ ⁄©ÿ±€å⁄∫", biome_btn: "ÿ™ŸÑÿßÿ¥ ⁄©ÿ±€å⁄∫", tool1_btn: "ÿ≠ÿ≥ÿßÿ® ⁄©ÿ±€å⁄∫", tool2_btn: "ÿ™€åÿßÿ± ⁄©ÿ±€å⁄∫", tool3_btn: "ÿ™ÿ®ÿØ€åŸÑ ⁄©ÿ±€å⁄∫", tool4_btn: "ÿ≠ÿ≥ÿßÿ® ⁄©ÿ±€å⁄∫", tool5_btn: "ÿ™€åÿßÿ± ⁄©ÿ±€å⁄∫", tool6_btn: "ÿ≠ÿ≥ÿßÿ® ⁄©ÿ±€å⁄∫", tool7_btn: "ÿ™€åÿßÿ± ⁄©ÿ±€å⁄∫", tool8_btn: "ÿ≠ÿ≥ÿßÿ® ⁄©ÿ±€å⁄∫" }
};

// üåê –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞
function setLanguage(lang) {
    if (!Object.keys(translations).includes(lang)) return;
    localStorage.setItem('language', lang);
    const newUrl = new URL(window.location);
    newUrl.searchParams.set('lang', lang);
    window.history.pushState({ lang }, '', newUrl);
    document.body.classList.add('language-fade');
    setTimeout(() => {
        applyTranslations(lang);
        updateSEOTags(lang);
        updateLanguageUI(lang);
        document.body.classList.remove('language-fade');
    }, 300);
    const dropdown = document.getElementById('lang-dropdown');
    if (dropdown) dropdown.style.display = 'none';
}

// üåê –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SEO
function updateSEOTags(lang) {
    const t = translations[lang];
    document.title = t.title;
    let metaDesc = document.querySelector('meta[name="description"]');
    if (!metaDesc) {
        metaDesc = document.createElement('meta');
        metaDesc.name = 'description';
        document.head.appendChild(metaDesc);
    }
    metaDesc.content = t.metaDescription || t.headerSubtitle;
}

// üåê UI —è–∑—ã–∫–∞
function updateLanguageUI(lang) {
    const t = translations[lang];
    const flagSpan = document.getElementById('current-flag');
    const langSpan = document.getElementById('current-lang');
    if (flagSpan) {
        if (lang === 'en') flagSpan.innerHTML = '<svg width="20" height="15" viewBox="0 0 20 15" xmlns="http://www.w3.org/2000/svg"><defs><clipPath id="a"><rect width="20" height="15"/></clipPath></defs><g clip-path="url(#a)"><rect width="20" height="15" fill="#00247D"/><path d="M0 0h20v15H0z" fill="#00247D"/><path d="M0 0v15l8-6.5L0 2z" fill="#CF142B"/><path d="M20 0v15l-8-6.5L20 2z" fill="#CF142B"/><path d="M0 0h20v2H0z" fill="#fff"/><path d="M0 13h20v2H0z" fill="#fff"/><path d="M0 6h20v3H0z" fill="#fff"/><path d="M8 0h2v15H8z" fill="#fff"/><path d="M10 0l-8 6.5V2L10 8z" fill="#CF142B"/><path d="M10 15l8-6.5V13L10 7z" fill="#CF142B"/></g></svg>';
        else if (lang === 'ru') flagSpan.innerHTML = '<svg width="20" height="15" viewBox="0 0 20 15" xmlns="http://www.w3.org/2000/svg"><rect width="20" height="5" y="0" fill="#fff"/><rect width="20" height="5" y="5" fill="#0033A0"/><rect width="20" height="5" y="10" fill="#D52B1E"/></svg>';
        else flagSpan.textContent = t.flag || '';
    }
    if (langSpan) langSpan.textContent = t.langName;
}

// üåê –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã ‚Äî –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û –î–õ–Ø –í–°–ï–• –°–¢–†–ê–ù–ò–¶
function applyTranslations(lang) {
    const t = translations[lang];

    // Header
    const headerH1 = document.querySelector('header h1');
    const headerP = document.querySelector('header p');
    if (headerH1 && headerH1.textContent.includes('Redstone')) headerH1.textContent = t.redstone_title;
    else if (headerH1 && headerH1.textContent.includes('Enchant')) headerH1.textContent = t.enchant_title;
    else if (headerH1 && headerH1.textContent.includes('Biome')) headerH1.textContent = t.biome_title;
    if (headerP) {
        if (window.location.pathname.includes('redstone.html')) headerP.textContent = t.redstone_subtitle;
        else if (window.location.pathname.includes('enchant.html')) headerP.textContent = t.enchant_subtitle;
        else if (window.location.pathname.includes('biome.html')) headerP.textContent = t.biome_subtitle;
        else headerP.textContent = t.headerSubtitle;
    }

    // Footer
    const footerP = document.querySelectorAll('footer p');
    if (footerP[1]) footerP[1].innerHTML = t.footerText || footerP[1].innerHTML;

    // Footer links
    const navLinks = document.querySelectorAll('footer a');
    if (navLinks[0]) navLinks[0].textContent = t.navHome;
    if (navLinks[1]) navLinks[1].textContent = t.navFAQ;
    if (navLinks[2]) navLinks[2].textContent = t.navBot;
    if (navLinks[3]) navLinks[3].textContent = t.navTOS;
    if (navLinks[4]) navLinks[4].textContent = t.navPrivacy;

    // Tool cards ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ
    const toolCards = document.querySelectorAll('.tool-card');
    if (toolCards.length > 0) {
        const page = window.location.pathname;
        if (page.includes('redstone.html') && toolCards[0]) {
            toolCards[0].querySelector('h3').textContent = t.redstone_tool_title;
            toolCards[0].querySelector('p').textContent = t.redstone_tool_desc;
            toolCards[0].querySelector('button').textContent = t.redstone_btn;
        } else if (page.includes('enchant.html') && toolCards[0]) {
            toolCards[0].querySelector('h3').textContent = t.enchant_tool_title;
            toolCards[0].querySelector('button').textContent = t.enchant_btn;
        } else if (page.includes('biome.html') && toolCards[0]) {
            toolCards[0].querySelector('h3').textContent = t.biome_tool_title;
            toolCards[0].querySelector('button').textContent = t.biome_btn;
        }
    }

    // –ë–æ—Ç
    if (window.location.pathname.includes('bot.html')) {
        const input = document.getElementById('user-question');
        const btn = document.querySelector('button[onclick="askBot()"]');
        const examplesTitle = document.querySelector('.tool-card h3');
        if (input) input.placeholder = t.bot_placeholder;
        if (btn) btn.textContent = t.bot_send;
        if (examplesTitle && examplesTitle.textContent.includes('üí°')) examplesTitle.textContent = t.bot_examples;
    }
}

// üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    // –Ø–∑—ã–∫–æ–≤–æ–µ –º–µ–Ω—é
    const toggleBtn = document.getElementById('lang-toggle');
    const dropdown = document.getElementById('lang-dropdown');
    if (toggleBtn && dropdown) {
        toggleBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            dropdown.style.display = dropdown.style.display === 'block' ? 'none' : 'block';
        });
        document.addEventListener('click', (e) => {
            if (!dropdown.contains(e.target) && e.target !== toggleBtn) {
                dropdown.style.display = 'none';
            }
        });

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥—Ä–æ–ø–¥–∞—É–Ω —è–∑—ã–∫–∞–º–∏
        const langs = ['ru', 'en', 'zh', 'es', 'hi', 'bn', 'pt', 'ur'];
        langs.forEach(langCode => {
            const langData = translations[langCode];
            if (!langData) return;
            const div = document.createElement('div');
            div.style.padding = '10px';
            div.style.cursor = 'pointer';
            div.style.display = 'flex';
            div.style.alignItems = 'center';
            div.style.gap = '8px';
            div.style.transition = 'background 0.2s';
            div.style.borderTop = dropdown.children.length ? '1px solid #2c3e50' : 'none';
            div.onmouseenter = () => div.style.background = '#3d566e';
            div.onmouseleave = () => div.style.background = 'transparent';
            div.onclick = () => setLanguage(langCode);
            div.innerHTML = `<span>${langData.flag || ''}</span> ${langData.langName}`;
            dropdown.appendChild(div);
        });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
    const urlParams = new URLSearchParams(window.location.search);
    const langFromURL = urlParams.get('lang');
    const langFromStorage = localStorage.getItem('language');
    const browserLang = navigator.language.split('-')[0];
    let lang = langFromURL || langFromStorage || browserLang;
    if (!translations[lang]) lang = 'ru';
    localStorage.setItem('language', lang);
    updateLanguageUI(lang);
    applyTranslations(lang);
    updateSEOTags(lang);
});

// ü§ñ –ë–æ—Ç
function askBot() {
    const lang = localStorage.getItem('language') || 'ru';
    const t = translations[lang] || translations.ru;
    const question = document.getElementById('user-question')?.value.trim().toLowerCase();
    const answerDiv = document.getElementById('bot-answer');
    if (!answerDiv) return;
    let answer = t.bot_answers?.default || "I don't know.";
    if (question?.includes("–∞–ª–º–∞–∑") || question?.includes("diamond")) answer = t.bot_answers?.diamonds || answer;
    else if (question?.includes("–ø–æ—Ä—Ç–∞–ª") || question?.includes("portal") || question?.includes("nether")) answer = t.bot_answers?.portal || answer;
    else if (question?.includes("–æ–ø—ã—Ç") || question?.includes("xp") || question?.includes("—Ñ–µ—Ä–º–∞")) answer = t.bot_answers?.xp || answer;
    else if (question?.includes("–∫—Ä–∞") || question?.includes("world") || question?.includes("–º–∏—Ä")) answer = t.bot_answers?.world || answer;
    else if (question?.includes("–∑–∞—á–∞—Ä") || question?.includes("enchant")) answer = t.bot_answers?.enchant || answer;
    answerDiv.style.display = 'block';
    answerDiv.textContent = answer;
}

// === –°–¢–ê–†–´–ï –§–£–ù–ö–¶–ò–ò (1‚Äì8) ‚Äî –û–°–¢–ê–í–õ–ï–ù–´ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ===
// ... (–≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ—Ç calculateBlocks() –¥–æ calculateArmorDurability()) ...
// üè† 1. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±–ª–æ–∫–æ–≤ –¥–ª—è –¥–æ–º–∞
function calculateBlocks() {
    const l = parseFloat(document.getElementById('length').value);
    const w = parseFloat(document.getElementById('width').value);
    const h = parseFloat(document.getElementById('height').value);

    if (!isNaN(l) && !isNaN(w) && !isNaN(h)) {
        const walls = 2 * h * (l + w);
        const roof = l * w;
        const floor = l * w;
        const total = walls + roof + floor;

        const resultDiv = document.getElementById('result-blocks');
        resultDiv.style.display = 'block';
        const lang = localStorage.getItem('language') || 'ru';
        resultDiv.textContent = translations[lang].tool1_result(total);
    } else {
        const lang = localStorage.getItem('language') || 'ru';
        alert(lang === 'en' ? 'Please enter all values.' : '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è.');
    }
}

// üåç 2. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
function generateCoords() {
    const x = Math.floor(Math.random() * 2000 - 1000);
    const z = Math.floor(Math.random() * 2000 - 1000);
    const y = 64 + Math.floor(Math.random() * 100);

    const resultDiv = document.getElementById('result-coords');
    resultDiv.style.display = 'block';
    const lang = localStorage.getItem('language') || 'ru';
    resultDiv.textContent = translations[lang].tool2_result(x, y, z);
}

// ‚è≥ 3. –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function convertGameTime() {
    const mins = parseFloat(document.getElementById('game-minutes').value);
    if (!isNaN(mins)) {
        const resultDiv = document.getElementById('result-time');
        resultDiv.style.display = 'block';
        const lang = localStorage.getItem('language') || 'ru';
        resultDiv.textContent = translations[lang].tool3_result(mins);
    } else {
        const lang = localStorage.getItem('language') || 'ru';
        alert(lang === 'en' ? 'Enter minutes.' : '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.');
    }
}

// ‚ú® 4. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–ø—ã—Ç–∞
function calculateXP() {
    const xp = parseInt(document.getElementById('xp-amount').value);
    if (!isNaN(xp) && xp >= 0) {
        let level = 0;
        let remaining = xp;
        for (let i = 1; remaining >= 0; i++) {
            const cost = i <= 16 ? i * 2 + 5 : (i <= 31 ? i * 5 - 38 : i * 9 - 158);
            if (remaining < cost) break;
            remaining -= cost;
            level = i;
        }
        const resultDiv = document.getElementById('result-xp');
        resultDiv.style.display = 'block';
        const lang = localStorage.getItem('language') || 'ru';
        resultDiv.textContent = translations[lang].tool4_result(level, remaining);
    } else {
        const lang = localStorage.getItem('language') || 'ru';
        alert(lang === 'en' ? 'Enter valid XP.' : '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞.');
    }
}

// üè∑Ô∏è 5. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤
function generateItemName() {
    const lang = localStorage.getItem('language') || 'ru';
    const prefixes = lang === 'ru' 
        ? ['–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π', '–ü—Ä–æ–∫–ª—è—Ç—ã–π', '–°–∏—è—é—â–∏–π', '–¢–µ–º–Ω—ã–π', '–í–µ—á–Ω—ã–π', '–û–≥–Ω–µ–Ω–Ω—ã–π', '–õ–µ–¥—è–Ω–æ–π']
        : ['Legendary', 'Cursed', 'Shining', 'Dark', 'Eternal', 'Fiery', 'Frosty'];
    const suffixes = lang === 'ru'
        ? ['–ú–µ—á–∞', '–ü–æ—Å–æ—Ö–∞', '–©–∏—Ç–∞', '–õ—É–∫–∞', '–ö–∏—Ä–∫–∏', '–®–ª–µ–º–∞', '–ê–º—É–ª–µ—Ç–∞']
        : ['Sword', 'Staff', 'Shield', 'Bow', 'Pickaxe', 'Helmet', 'Amulet'];

    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
    const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];
    const name = `${prefix} ${suffix}`;

    const resultDiv = document.getElementById('result-itemname');
    resultDiv.style.display = 'block';
    resultDiv.textContent = translations[lang].tool5_result(name);
}

// üí• 6. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ñ–µ—Ä–º—ã –∫—Ä–∏–ø–µ—Ä–æ–≤
function calculateCreepers() {
    const needed = parseInt(document.getElementById('gunpowder-needed').value);
    if (!isNaN(needed) && needed > 0) {
        const creepers = Math.ceil(needed / 2);
        const resultDiv = document.getElementById('result-creepers');
        resultDiv.style.display = 'block';
        const lang = localStorage.getItem('language') || 'ru';
        resultDiv.textContent = translations[lang].tool6_result(creepers);
    } else {
        const lang = localStorage.getItem('language') || 'ru';
        alert(lang === 'en' ? 'Enter gunpowder amount.' : '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä–æ—Ö–∞.');
    }
}

// üå± 7. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä seed
function generateSeed() {
    const seed = Math.floor(Math.random() * 9007199254740991) - 4503599627370495;
    const resultDiv = document.getElementById('result-seed');
    resultDiv.style.display = 'block';
    const lang = localStorage.getItem('language') || 'ru';
    resultDiv.textContent = translations[lang].tool7_result(seed);
}

// üõ°Ô∏è 8. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –±—Ä–æ–Ω–∏
function calculateArmorDurability() {
    const armorDurabilities = {
        leather: 55,
        iron: 165,
        diamond: 363,
        netherite: 407
    };
    const type = document.getElementById('armor-type').value;
    const damage = parseFloat(document.getElementById('damage-per-hit').value);
    if (!isNaN(damage) && damage > 0) {
        const durability = armorDurabilities[type];
        const hits = Math.floor(durability / damage);
        const resultDiv = document.getElementById('result-armor');
        resultDiv.style.display = 'block';
        const lang = localStorage.getItem('language') || 'ru';
        resultDiv.textContent = translations[lang].tool8_result(hits, damage);
    } else {
        const lang = localStorage.getItem('language') || 'ru';
        alert(lang === 'en' ? 'Enter damage per hit.' : '–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–Ω –∑–∞ —É–¥–∞—Ä.');
    }
}

// === –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò ===

function calculateRepeaters() {
    const len = parseInt(document.getElementById('redstone-length')?.value);
    const lang = localStorage.getItem('language') || 'ru';
    const t = translations[lang] || translations.ru;
    if (!isNaN(len) && len > 0) {
        const repeaters = Math.ceil(len / 15);
        const delay = repeaters * 0.1;
        const resultDiv = document.getElementById('result-repeaters');
        if (resultDiv) {
            resultDiv.style.display = 'block';
            resultDiv.textContent = t.redstone_result ? t.redstone_result(repeaters, delay) : `Repeaters: ${repeaters}`;
        }
    } else {
        alert(t.tool1_result ? (lang === 'en' ? 'Enter valid length.' : '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏–Ω—É.') : 'Error');
    }
}

function suggestEnchant() {
    const item = document.getElementById('item-type')?.value;
    const level = parseInt(document.getElementById('enchant-level')?.value);
    const lang = localStorage.getItem('language') || 'ru';
    const t = translations[lang] || translations.ru;
    if (isNaN(level) || level < 1 || level > 30) {
        alert(lang === 'en' ? 'Enter level 1‚Äì30.' : '–í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ—Ç 1 –¥–æ 30.');
        return;
    }
    let suggestion = '';
    if (lang === 'en') {
        if (item === 'sword') suggestion = level >= 25 ? 'Sharpness V or Smite V' : level >= 15 ? 'Sharpness IV' : 'Bane of Arthropods III';
        else if (item === 'bow') suggestion = level >= 25 ? 'Power V + Infinity' : level >= 15 ? 'Power IV' : 'Flame';
        else if (item === 'pickaxe') suggestion = level >= 25 ? 'Efficiency V + Fortune III' : level >= 15 ? 'Efficiency IV' : 'Unbreaking III';
        else if (item === 'armor') suggestion = level >= 25 ? 'Protection IV or Thorns III' : level >= 15 ? 'Protection III' : 'Blast Protection II';
    } else {
        if (item === 'sword') suggestion = level >= 25 ? '–û—Å—Ç—Ä–æ—Ç–∞ V –∏–ª–∏ –ù–µ–±–µ—Å–Ω–∞—è –∫–∞—Ä–∞ V' : level >= 15 ? '–û—Å—Ç—Ä–æ—Ç–∞ IV' : '–ë–∏—á —á–ª–µ–Ω–∏—Å—Ç–æ–Ω–æ–≥–∏—Ö III';
        else if (item === 'bow') suggestion = level >= 25 ? '–ú–æ—â—å V + –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å' : level >= 15 ? '–ú–æ—â—å IV' : '–ü–ª–∞–º—è';
        else if (item === 'pickaxe') suggestion = level >= 25 ? '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å V + –£–¥–∞—á–∞ III' : level >= 15 ? '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å IV' : '–ü—Ä–æ—á–Ω–æ—Å—Ç—å III';
        else if (item === 'armor') suggestion = level >= 25 ? '–ó–∞—â–∏—Ç–∞ IV –∏–ª–∏ –®–∏–ø—ã III' : level >= 15 ? '–ó–∞—â–∏—Ç–∞ III' : '–í–∑—Ä—ã–≤–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å II';
    }
    const resultDiv = document.getElementById('result-enchant');
    if (resultDiv) {
        resultDiv.style.display = 'block';
        resultDiv.textContent = t.enchant_result ? t.enchant_result(suggestion) : suggestion;
    }
}

function findBiome() {
    const biome = document.getElementById('target-biome')?.value;
    const lang = localStorage.getItem('language') || 'ru';
    const t = translations[lang] || translations.ru;
    let tip = t.biome_result?.[biome] || (lang === 'en' ? 'Try another biome.' : '–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –±–∏–æ–º.');
    const resultDiv = document.getElementById('result-biome');
    if (resultDiv) {
        resultDiv.style.display = 'block';
        resultDiv.textContent = tip;
    }
}

// === –ë–£–†–ì–ï–†-–ú–ï–ù–Æ ===
function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    if (sidebar) sidebar.style.display = sidebar.style.display === 'block' ? 'none' : 'block';
}
function closeSidebar() {
    const sidebar = document.getElementById('sidebar');
    if (sidebar) sidebar.style.display = 'none';
}
document.getElementById('menu-toggle')?.addEventListener('click', toggleSidebar);
window.addEventListener('resize', () => {
    if (window.innerWidth > 768) closeSidebar();
});
// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä –Ω–∞ –º–æ–±–∏–ª–∫–∞—Ö
if (window.innerWidth <= 768) {
    const toggle = document.getElementById('menu-toggle');
    if (toggle) toggle.style.display = 'block';
}
